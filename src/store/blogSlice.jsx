// Import createSlice from Redux Toolkit for creating Redux slice
import { createSlice } from '@reduxjs/toolkit';

/**
 * Blog Slice - Redux Toolkit Slice for Blog Posts State Management
 * 
 * Redux Slice Concepts Demonstrated:
 * 1. createSlice - Combines actions and reducers in one place
 * 2. Immer integration - Allows "mutative" syntax for immutable updates
 * 3. Auto-generated action creators and action types
 * 4. Structured state management with initial state
 * 5. Multiple reducer functions for different operations
 * 
 * Slice Benefits:
 * - Reduces Redux boilerplate code significantly
 * - Built-in Immer for simpler state updates
 * - Automatic action creator generation  
 * - TypeScript-friendly with better intellisense
 * - Standardized Redux patterns
 */
const blogSlice = createSlice({
  // Slice name - used to identify this slice in the Redux store
  // Creates action types like 'blog/addPost', 'blog/deletePost'
  name: 'blog',
  
  // Initial state for blog slice
  // Structure: { posts: [] } where posts is array of blog post objects
  initialState: { 
    posts: [
      { 
        id: 1, 
        title: 'First Post (from Redux)',
        createdAt: new Date().toISOString()
      }
    ]
  },
  
  // Reducer functions - define how state updates in response to actions
  // Each function automatically becomes an action creator
  reducers: {
    /**
     * Add post reducer
     * Adds new blog post to the posts array
     * 
     * @param {Object} state - Current blog state
     * @param {Object} action - Action object with payload containing new post
     */
    addPost: (state, action) => {
      // Immer allows direct mutation syntax (actually creates immutable update)
      // This is equivalent to: return { ...state, posts: [...state.posts, action.payload] }
      state.posts.push(action.payload);
    },
    
    /**
     * Delete post reducer
     * Removes blog post by ID from the posts array
     * 
     * @param {Object} state - Current blog state
     * @param {Object} action - Action object with payload containing post ID to delete
     */
    deletePost: (state, action) => {
      // Filter out the post with matching ID
      // Immer handles immutability automatically
      state.posts = state.posts.filter(post => post.id !== action.payload.id);
    },
    
    /**
     * Update post reducer
     * Updates existing blog post with new data
     * 
     * @param {Object} state - Current blog state
     * @param {Object} action - Action object with payload: { id, updates }
     */
    updatePost: (state, action) => {
      // Find post by ID and update it
      const postIndex = state.posts.findIndex(post => post.id === action.payload.id);
      if (postIndex !== -1) {
        // Merge existing post data with updates
        state.posts[postIndex] = { 
          ...state.posts[postIndex], 
          ...action.payload.updates,
          updatedAt: new Date().toISOString()
        };
      }
    },
    
    /**
     * Clear all posts reducer
     * Removes all blog posts from the array
     * 
     * @param {Object} state - Current blog state
     */
    clearPosts: (state) => {
      // Reset posts array to empty
      state.posts = [];
    },
    
    /**
     * Set posts reducer
     * Replaces entire posts array (useful for loading data from API)
     * 
     * @param {Object} state - Current blog state
     * @param {Object} action - Action object with payload containing new posts array
     */
    setPosts: (state, action) => {
      state.posts = action.payload;
    }
  },
});

// Export action creators
// These are automatically generated by createSlice based on reducer names
// Usage: dispatch(addPost(newPost)) or dispatch(deletePost({ id: 1 }))
export const { 
  addPost, 
  deletePost, 
  updatePost, 
  clearPosts, 
  setPosts 
} = blogSlice.actions;

// Export reducer function
// This will be used in store configuration to combine with other reducers
// The reducer handles all actions defined in the reducers object above
export default blogSlice.reducer;