// Import createSlice from Redux Toolkit for creating Redux slice
// createSlice is a function that accepts initial state, reducer functions, and slice name
// It automatically generates action creators and action types based on reducer names
import { createSlice } from '@reduxjs/toolkit';

/**
 * Cart Slice - Redux Toolkit Slice for Shopping Cart State Management
 * 
 * Redux Toolkit Concepts Demonstrated:
 * 1. createSlice - Simplifies Redux boilerplate code
 * 2. Immer integration - Allows "mutative" logic that's actually immutable
 * 3. Auto-generated action creators and action types
 * 4. Structured state management for complex applications
 * 
 * Benefits of Redux Toolkit:
 * - Less boilerplate code compared to traditional Redux
 * - Built-in Immer for immutable updates
 * - TypeScript support
 * - DevTools integration
 * - Performance optimizations
 */
const cartSlice = createSlice({
  // Slice name - used to identify this slice in the Redux store
  // This becomes the key in the root state object
  name: 'cart',
  
  // Initial state for this slice
  // Structure: { items: [] } where items is array of cart items
  initialState: { 
    items: [] 
  },
  
  // Reducer functions - define how state updates in response to actions
  // Each function automatically becomes an action creator
  reducers: {
    /**
     * Add item to cart reducer
     * Uses Immer under the hood for immutable updates
     * 
     * @param {Object} state - Current cart state
     * @param {Object} action - Action object with payload containing product to add
     */
    add: (state, action) => {
      // Find existing item in cart by ID
      const existingItem = state.items.find(item => item.id === action.payload.id);
      
      if (existingItem) {
        // If item exists, increment quantity
        // Immer allows direct mutation syntax (actually creates immutable update)
        existingItem.qty++;
      } else {
        // If item doesn't exist, add new item with quantity 1
        // Spread operator to avoid mutating original product object
        state.items.push({ ...action.payload, qty: 1 });
      }
    },
    
    /**
     * Update quantity reducer
     * Handles both increment and decrement operations
     * 
     * @param {Object} state - Current cart state
     * @param {Object} action - Action object with payload: { id, amount }
     */
    updateQty: (state, action) => {
      // Find item to update by ID
      const itemToUpdate = state.items.find(item => item.id === action.payload.id);
      
      if (itemToUpdate) {
        // Update quantity by adding the amount (can be positive or negative)
        itemToUpdate.qty += action.payload.amount;
      }
      
      // Remove items with quantity 0 or less
      // Filter creates new array, but Immer handles immutability
      state.items = state.items.filter(item => item.qty > 0);
    },
  },
});

// Export action creators
// These are automatically generated by createSlice based on reducer names
// Usage: dispatch(add(product)) or dispatch(updateQty({ id: 1, amount: -1 }))
export const { add, updateQty } = cartSlice.actions;

// Export reducer function
// This will be used in the store configuration to combine with other reducers
// The reducer handles all actions defined in the reducers object above
export default cartSlice.reducer;